// <auto-generated />

using System;
using api.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace api.Migrations
{
	[DbContext(typeof(ApplicationDbContext))]
	internal class ApplicationDbContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "3.0.0")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("ClaimType")
					.HasColumnType("nvarchar(max)");

				b.Property<string>("ClaimValue")
					.HasColumnType("nvarchar(max)");

				b.Property<int>("RoleId")
					.HasColumnType("int");

				b.HasKey("Id");

				b.HasIndex("RoleId");

				b.ToTable("AspNetRoleClaims");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("ClaimType")
					.HasColumnType("nvarchar(max)");

				b.Property<string>("ClaimValue")
					.HasColumnType("nvarchar(max)");

				b.Property<int>("UserId")
					.HasColumnType("int");

				b.HasKey("Id");

				b.HasIndex("UserId");

				b.ToTable("AspNetUserClaims");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
			{
				b.Property<string>("LoginProvider")
					.HasColumnType("nvarchar(450)");

				b.Property<string>("ProviderKey")
					.HasColumnType("nvarchar(450)");

				b.Property<string>("ProviderDisplayName")
					.HasColumnType("nvarchar(max)");

				b.Property<int>("UserId")
					.HasColumnType("int");

				b.HasKey("LoginProvider", "ProviderKey");

				b.HasIndex("UserId");

				b.ToTable("AspNetUserLogins");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
			{
				b.Property<int>("UserId")
					.HasColumnType("int");

				b.Property<int>("RoleId")
					.HasColumnType("int");

				b.HasKey("UserId", "RoleId");

				b.HasIndex("RoleId");

				b.ToTable("AspNetUserRoles");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
			{
				b.Property<int>("UserId")
					.HasColumnType("int");

				b.Property<string>("LoginProvider")
					.HasColumnType("nvarchar(450)");

				b.Property<string>("Name")
					.HasColumnType("nvarchar(450)");

				b.Property<string>("Value")
					.HasColumnType("nvarchar(max)");

				b.HasKey("UserId", "LoginProvider", "Name");

				b.ToTable("AspNetUserTokens");
			});

			modelBuilder.Entity("api.Persistent.BathPlace", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("Commentary")
					.HasColumnType("nvarchar(max)");

				b.Property<DateTime>("Modified")
					.HasColumnType("datetime2");

				b.Property<string>("Name")
					.HasColumnType("nvarchar(max)");

				b.Property<int>("PriceId")
					.HasColumnType("int");

				b.Property<int>("Room")
					.HasColumnType("int");

				b.Property<int>("Type")
					.HasColumnType("int");

				b.HasKey("Id");

				b.HasIndex("PriceId");

				b.ToTable("BathPlaces");
			});

			modelBuilder.Entity("api.Persistent.BathPlacePosition", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<int>("BathPlaceId")
					.HasColumnType("int");

				b.Property<DateTime?>("Begin")
					.HasColumnType("datetime2");

				b.Property<decimal>("Cost")
					.HasColumnType("decimal(8,2)");

				b.Property<string>("DiscountName")
					.HasColumnType("nvarchar(max)");

				b.Property<decimal?>("DiscountValue")
					.HasColumnType("decimal(8,2)");

				b.Property<int>("Duration")
					.HasColumnType("int");

				b.Property<DateTime?>("End")
					.HasColumnType("datetime2");

				b.Property<int>("OrderId")
					.HasColumnType("int");

				b.Property<decimal>("Price")
					.HasColumnType("decimal(8,2)");

				b.Property<int>("Status")
					.HasColumnType("int");

				b.HasKey("Id");

				b.HasIndex("BathPlaceId");

				b.HasIndex("OrderId");

				b.ToTable("BathPlacePositions");
			});

			modelBuilder.Entity("api.Persistent.BathPlacePrice", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<decimal>("Price")
					.HasColumnType("decimal(8,2)");

				b.Property<int>("Room")
					.HasColumnType("int");

				b.Property<int>("Type")
					.HasColumnType("int");

				b.HasKey("Id");

				b.ToTable("BathPlacePrices");
			});

			modelBuilder.Entity("api.Persistent.Discount", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<DateTime>("Modified")
					.HasColumnType("datetime2");

				b.Property<string>("Name")
					.HasColumnType("nvarchar(max)");

				b.Property<decimal>("Value")
					.HasColumnType("decimal(8,2)");

				b.HasKey("Id");

				b.ToTable("Discount");
			});

			modelBuilder.Entity("api.Persistent.Master", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("FirstName")
					.HasColumnType("nvarchar(max)");

				b.Property<string>("LastName")
					.HasColumnType("nvarchar(max)");

				b.HasKey("Id");

				b.ToTable("Masters");
			});

			modelBuilder.Entity("api.Persistent.Order", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<bool>("Canceled")
					.HasColumnType("bit");

				b.Property<string>("Commentary")
					.HasColumnType("nvarchar(max)");

				b.Property<DateTime>("Modified")
					.HasColumnType("datetime2");

				b.Property<string>("Name")
					.HasColumnType("nvarchar(max)");

				b.Property<int>("Room")
					.HasColumnType("int");

				b.Property<decimal>("TotalCost")
					.HasColumnType("decimal(8,2)");

				b.Property<int>("Type")
					.HasColumnType("int");

				b.HasKey("Id");

				b.ToTable("Orders");
			});

			modelBuilder.Entity("api.Persistent.Product", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("Desciption")
					.HasColumnType("nvarchar(max)");

				b.Property<DateTime>("Modified")
					.HasColumnType("datetime2");

				b.Property<string>("Name")
					.IsRequired()
					.HasColumnType("nvarchar(50)")
					.HasMaxLength(50);

				b.Property<decimal>("Price")
					.HasColumnType("decimal(8,2)");

				b.HasKey("Id");

				b.ToTable("Products");
			});

			modelBuilder.Entity("api.Persistent.ProductPosition", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<int>("Count")
					.HasColumnType("int");

				b.Property<int>("OrderId")
					.HasColumnType("int");

				b.Property<int>("ProductId")
					.HasColumnType("int");

				b.Property<decimal>("ProductPrice")
					.HasColumnType("decimal(8,2)");

				b.Property<decimal>("TotalPrice")
					.HasColumnType("decimal(8,2)");

				b.HasKey("Id");

				b.HasIndex("OrderId");

				b.HasIndex("ProductId");

				b.ToTable("ProductPositions");
			});

			modelBuilder.Entity("api.Persistent.Role", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("ConcurrencyStamp")
					.IsConcurrencyToken()
					.HasColumnType("nvarchar(max)");

				b.Property<string>("Name")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.Property<string>("NormalizedName")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.HasKey("Id");

				b.HasIndex("NormalizedName")
					.IsUnique()
					.HasName("RoleNameIndex")
					.HasFilter("[NormalizedName] IS NOT NULL");

				b.ToTable("AspNetRoles");
			});

			modelBuilder.Entity("api.Persistent.Service", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<string>("Name")
					.HasColumnType("nvarchar(max)");

				b.Property<decimal>("Price")
					.HasColumnType("decimal(18,2)");

				b.HasKey("Id");

				b.ToTable("Services");
			});

			modelBuilder.Entity("api.Persistent.ServicePosition", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<decimal>("AddonsCost")
					.HasColumnType("decimal(18,2)");

				b.Property<int>("MasterId")
					.HasColumnType("int");

				b.Property<int>("OrderId")
					.HasColumnType("int");

				b.Property<decimal>("ServiceCost")
					.HasColumnType("decimal(18,2)");

				b.Property<int>("ServiceId")
					.HasColumnType("int");

				b.Property<DateTime>("Time")
					.HasColumnType("datetime2");

				b.Property<decimal>("TotalCost")
					.HasColumnType("decimal(18,2)");

				b.HasKey("Id");

				b.HasIndex("MasterId");

				b.HasIndex("OrderId");

				b.HasIndex("ServiceId");

				b.ToTable("ServicePositions");
			});

			modelBuilder.Entity("api.Persistent.User", b =>
			{
				b.Property<int>("Id")
					.ValueGeneratedOnAdd()
					.HasColumnType("int")
					.HasAnnotation("SqlServer:ValueGenerationStrategy",
						SqlServerValueGenerationStrategy.IdentityColumn);

				b.Property<int>("AccessFailedCount")
					.HasColumnType("int");

				b.Property<string>("ConcurrencyStamp")
					.IsConcurrencyToken()
					.HasColumnType("nvarchar(max)");

				b.Property<string>("Email")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.Property<bool>("EmailConfirmed")
					.HasColumnType("bit");

				b.Property<bool>("LockoutEnabled")
					.HasColumnType("bit");

				b.Property<DateTimeOffset?>("LockoutEnd")
					.HasColumnType("datetimeoffset");

				b.Property<string>("NormalizedEmail")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.Property<string>("NormalizedUserName")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.Property<string>("PasswordHash")
					.HasColumnType("nvarchar(max)");

				b.Property<string>("PhoneNumber")
					.HasColumnType("nvarchar(max)");

				b.Property<bool>("PhoneNumberConfirmed")
					.HasColumnType("bit");

				b.Property<string>("SecurityStamp")
					.HasColumnType("nvarchar(max)");

				b.Property<bool>("TwoFactorEnabled")
					.HasColumnType("bit");

				b.Property<string>("UserName")
					.HasColumnType("nvarchar(256)")
					.HasMaxLength(256);

				b.HasKey("Id");

				b.HasIndex("NormalizedEmail")
					.HasName("EmailIndex");

				b.HasIndex("NormalizedUserName")
					.IsUnique()
					.HasName("UserNameIndex")
					.HasFilter("[NormalizedUserName] IS NOT NULL");

				b.ToTable("AspNetUsers");
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
			{
				b.HasOne("api.Persistent.Role", null)
					.WithMany()
					.HasForeignKey("RoleId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
			{
				b.HasOne("api.Persistent.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
			{
				b.HasOne("api.Persistent.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
			{
				b.HasOne("api.Persistent.Role", null)
					.WithMany()
					.HasForeignKey("RoleId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("api.Persistent.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
			{
				b.HasOne("api.Persistent.User", null)
					.WithMany()
					.HasForeignKey("UserId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("api.Persistent.BathPlace", b =>
			{
				b.HasOne("api.Persistent.BathPlacePrice", "Price")
					.WithMany()
					.HasForeignKey("PriceId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("api.Persistent.BathPlacePosition", b =>
			{
				b.HasOne("api.Persistent.BathPlace", "BathPlace")
					.WithMany()
					.HasForeignKey("BathPlaceId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("api.Persistent.Order", null)
					.WithMany("BathPlacePositions")
					.HasForeignKey("OrderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("api.Persistent.ProductPosition", b =>
			{
				b.HasOne("api.Persistent.Order", null)
					.WithMany("ProductPositions")
					.HasForeignKey("OrderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("api.Persistent.Product", "Product")
					.WithMany()
					.HasForeignKey("ProductId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});

			modelBuilder.Entity("api.Persistent.ServicePosition", b =>
			{
				b.HasOne("api.Persistent.Master", "Master")
					.WithMany()
					.HasForeignKey("MasterId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("api.Persistent.Order", null)
					.WithMany("ServicePositions")
					.HasForeignKey("OrderId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();

				b.HasOne("api.Persistent.Service", "Service")
					.WithMany()
					.HasForeignKey("ServiceId")
					.OnDelete(DeleteBehavior.Cascade)
					.IsRequired();
			});
#pragma warning restore 612, 618
		}
	}
}